(setq user-emacs-directory "~/prj/config/emacs/emacs.d/")

;; problematic with C-x C-a binding
(setq edebug-inhibit-emacs-lisp-mode-bindings 't)

(defun ab-inverse-color ()
  (interactive)
  (set-foreground-color "black")
  (set-background-color "white"))

(require 'package)
(add-to-list 'package-archives
  '("melpa" . "http://melpa.milkbox.net/packages/") t)

(package-initialize) 

(defun racket-start-geiser ()
  (interactive)
  (racket-mode)
  (geiser-mode)
  (auto-complete-mode)
  (geiser-mode-switch-to-repl nil)
  (ac-geiser-setup))


;; global keybindings
(global-unset-key (kbd "C-x o"))
(global-unset-key (kbd "C-x C-z"))
(global-unset-key (kbd "C-x k"))

(global-unset-key (kbd "<C-M-left>"))
(global-unset-key (kbd "<C-M-right>"))

(global-set-key (kbd "<M-left>") 'backward-sexp)
(global-set-key (kbd "<M-right>") 'forward-sexp)
(global-set-key (kbd "<M-up>") 'backward-sentence)
(global-set-key (kbd "<M-down>") 'forward-sentence)
(global-set-key (kbd "C-x C-d") 'ido-dired)

(global-set-key (kbd "C-$") 'undo)

(global-set-key (kbd "M-DEL") 'kill-sexp)
(global-set-key (kbd "<M-backspace>") 'backward-kill-sexp)

(add-hook 'dired-mode-hook
	  (lambda ()
	    (local-unset-key (kbd "C-o"))))

(defun kill-this-buffer-please ()
  (interactive)
  (kill-buffer (current-buffer)))

(global-set-key (kbd "C-x C-a") 'kill-this-buffer-please)

(global-set-key (kbd "C-x C-z") 'switch-to-buffer)
(global-set-key (kbd "C-o") #'(lambda () 
				(interactive) 
				(other-window 1)))

;; double char
(load-file (concat user-emacs-directory "extra/double-char.el"))

(defdoublechar semi-colon ";" ".")
(defdoublechar coma "," "?")
(defdoublechar colon ":" "/")
(defdoublechar great "<" ">")
(defdoublechar arobase "à" "@")
(defdoublechar mark "-" "!") ; more convenient on azerty for-lisp-stuff.

;;(global-set-key (kbd ";") 'double-char---semi-colon)
(global-set-key (kbd ",") 'double-char---coma)
(global-set-key (kbd ":") 'double-char---colon)
(global-set-key (kbd "<") 'double-char---great)
(global-set-key (kbd "à") 'double-char---arobase)
(global-set-key (kbd "!") 'double-char---mark)

(ido-mode)


;; (require 'ac-slime)
;; (add-hook 'slime-mode-hook 'set-up-slime-ac)
;; (add-hook 'slime-repl-mode-hook 'set-up-slime-ac)
;; (eval-after-load "auto-complete"
;;   '(add-to-list 'ac-modes 'slime-repl-mode))


;; ratpoison same move windows
(require 'windmove)

(defun go-window-left ()
  (interactive)
  (if (windmove-find-other-window 'left)
      (windmove-left)
    (call-process "bash" nil 0 nil "-c" "ratpoison -c \"focusleft\"")))


(defun go-window-right ()
  (interactive)
  (if (windmove-find-other-window 'right)
      (windmove-right)
    (call-process "bash" nil 0 nil "-c" "ratpoison -c \"focusright\"")))


(defun go-window-down ()
  (interactive)
  (if (windmove-find-other-window 'down)
      (windmove-down)
    (call-process "bash" nil 0 nil "-c" "ratpoison -c \"focusdown\"")))

(defun go-window-up ()
  (interactive)
  (if (windmove-find-other-window 'up)
      (windmove-up)
    (call-process "bash" nil 0 nil "-c" "ratpoison -c \"focusup\"")))

(add-hook 'js2-mode-hook
	  (lambda ()
	    (require 'auto-complete)
	    (auto-complete-mode t)
	    (local-set-key (kbd "C-c C-c") 'comment-or-uncomment-region)))

(fset 'yes-or-no-p 'y-or-n-p)

;; (resize-mini-window-internal nil)
;; (resize-temp-buffer-window)

(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(show-paren-mode)
(setq show-paren-delay 0)
;; (set-face-foreground 'default "grey65")
;; (set-face-background 'default "black")

;; (set-face-foreground 'mode-line "black")
;; (set-face-background 'mode-line "grey40")

;; (set-face-foreground 'fringe "grey40")

;; (global-set-key (kbd "S-<right>") 'previous-buffer)
;; (global-set-key (kbd "S-<left>") 'next-buffer)

(add-hook 'emacs-lisp-mode-hook
	  (lambda ()
	    (auto-complete-mode 't)
	    (eldoc-mode 't)))

(add-hook 'org-mode-hook
	  (lambda ()
	    (org-bullets-mode)))

(add-hook 'before-save-hook
          (lambda ()
            (cond  
             ((equal major-mode 'racket-mode)
              (whitespace-cleanup))
             ((equal major-mode 'scheme-mode)
              (whitespace-cleanup))
             ((equal major-mode 'clojure-mode)
              (whitespace-cleanup)))))
              
;; (flycheck-define-checker racket
;;   "A Racket syntax checker using the Racket compiler.
;;    See URL `http://racket-lang.org/'."
;;   :command ("racket" "-f" source)
;;   :error-patterns
;;   ((error line-start (file-name) ":" line ":" column ":" (message) line-end))
;;   :modes racket-mode)

(add-hook 'racket-mode-hook
	  (lambda ()
	    (local-set-key (kbd "C-c C-c") 'comment-or-uncomment-region)
            (local-set-key (kbd "TAB") 'indent-for-tab-command)
	    (when (condition-case ex
	    	      (require 'flycheck) ('error nil))
	      (flycheck-define-checker 
	       racket
	       "A racket syntax checker"
	       :command ("racket" "-qf" source-inplace)
	       :error-patterns
	       ((error
	    	 line-start (file-name) ":" line ":" (one-or-more digit) ":" " " (message) line-end))
	       :modes
	       racket-mode)
	      (flycheck-mode)
	      (flycheck-select-checker 'racket))

	    (when (condition-case ex
		      (require 'highlight-parentheses-mode) ('error nil))
	      (highlight-parentheses-mode))))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ac-auto-start 1)
 '(ac-delay 0.05)
 '(ac-ignore-case nil)
 '(ac-ignores nil)
 '(ac-modes
   (quote
    (emacs-lisp-mode lisp-interaction-mode c-mode cc-mode c++-mode java-mode clojure-mode scala-mode scheme-mode ocaml-mode tuareg-modepython-mode ruby-mode ecmascript-mode javascript-mode js-mode js2-mode php-mode css-mode makefile-mode sh-mode xml-mode sgml-mode html-mode)))
 '(add-to-list (quote auto-mode-alist) t)
 '(ansi-color-names-vector
   ["#2e3436" "#a40000" "#4e9a06" "#c4a000" "#204a87" "#5c3566" "#729fcf" "#eeeeec"])
 '(browse-url-browser-function (quote browse-url-generic))
 '(browse-url-firefox-program "firefox")
 '(browse-url-generic-program "firefox")
 '(buffers-menu-show-status t)
 '(case-fold-search nil)
 '(compilation-read-command nil)
 '(compilation-window-height 20)
 '(custom-safe-themes
   (quote
    ("c87cc60d01cf755375759d165c1d60d9586c6a31f0b5437a0378c2a93cfc8407" "ea2d7a22c104d833046b3077847d92b36488580b7035bf4e475c9fa0b518441c" "ce79400f46bd76bebeba655465f9eadf60c477bd671cbcd091fe871d58002a88" "f5e9f66da69f504cb61aacedeb8284d8f38f2e6f835fd658cac5f0ad5d924549" default)))
 '(ensime-outline-scala-file t)
 '(ensime-sbt-program-name "sbt")
 '(erc-header-line-format nil)
 '(erc-hide-list (quote ("JOIN" "PART" "QUIT")))
 '(erc-nick "antoineB")
 '(erc-nickserv-alist
   (quote
    ((Ars nil nil "Census" "IDENTIFY" nil nil nil)
     (Austnet "NickOP!service@austnet.org" "/msg\\s-NickOP@austnet.org\\s-identify\\s-<password>" "nickop@austnet.org" "identify" nil nil nil)
     (Azzurra "NickServ!service@azzurra.org" "/ns\\s-IDENTIFY\\s-password" "NickServ" "IDENTIFY" nil nil nil)
     (BitlBee nil nil "&bitlbee" "identify" nil nil nil)
     (BRASnet "NickServ!services@brasnet.org" "/NickServ\\s-IDENTIFY\\s-senha" "NickServ" "IDENTIFY" nil "" nil)
     (DALnet "NickServ!service@dal.net" "/msg\\s-NickServ@services.dal.net\\s-IDENTIFY\\s-<password>" "NickServ@services.dal.net" "IDENTIFY" nil nil nil)
     (freenode "NickServ!NickServ@services." "This\\s-nickname\\s-is\\s-registered.\\s-Please\\s-choose" "NickServ" "IDENTIFY" t nil "You\\s-are\\s-now\\s-identified\\s-for\\s-")
     (GalaxyNet "NS!nickserv@galaxynet.org" "Please\\s-change\\s-nicks\\s-or\\s-authenticate." "NS@services.galaxynet.org" "AUTH" t nil nil)
     (GRnet "NickServ!service@irc.gr" "This\\s-nickname\\s-is\\s-registered\\s-and\\s-protected." "NickServ" "IDENTIFY" nil nil "Password\\s-accepted\\s--\\s-you\\s-are\\s-now\\s-recognized.")
     (iip "Trent@anon.iip" "type\\s-/squery\\s-Trent\\s-identify\\s-<password>" "Trent@anon.iip" "IDENTIFY" nil "SQUERY" nil)
     (OFTC "NickServ!services@services.oftc.net" nil "NickServ" "IDENTIFY" nil nil "You\\s-are\\s-successfully\\s-identified\\s-as\\s-")
     (Rizon "NickServ!service@rizon.net" "This\\s-nickname\\s-is\\s-registered\\s-and\\s-protected." "NickServ" "IDENTIFY" nil nil "Password\\s-accepted\\s--\\s-you\\s-are\\s-now\\s-recognized.")
     (QuakeNet nil nil "Q@CServe.quakenet.org" "auth" t nil nil)
     (SlashNET "NickServ!services@services.slashnet.org" "/msg\\s-NickServ\\s-IDENTIFY\\s-password" "NickServ@services.slashnet.org" "IDENTIFY" nil nil nil))))
 '(erc-nickserv-passwords (quote ((freenode (("antoineB" . "DKgLmYJV"))))))
 '(fill-column 80)
 '(flymake-allowed-file-name-masks
   (quote
    (("\\.\\(?:c\\(?:pp\\|xx\\|\\+\\+\\)?\\|CC\\)\\'" flymake-simple-make-init)
     ("\\.xml\\'" flymake-xml-init)
     ("\\.html?\\'" flymake-xml-init)
     ("\\.cs\\'" flymake-simple-make-init)
     ("\\.p[ml]\\'" flymake-perl-init)
     ("\\.php[345]?\\'" flymake-php-init)
     ("\\.h\\|\\.hpp\\'" flymake-master-make-header-init flymake-master-cleanup)
     ("\\.java\\'" flymake-simple-make-java-init flymake-simple-java-cleanup)
     ("[0-9]+\\.tex\\'" flymake-master-tex-init flymake-master-cleanup)
     ("\\.tex\\'" flymake-simple-tex-init)
     ("\\.scala\\'" flymake-simple-make-init)
     ("\\.idl\\'" flymake-simple-make-init))))
 '(flymake-log-level -1)
 '(font-lock-maximum-decoration t)
 '(fringe-mode (quote (0)) nil (fringe))
 '(geiser-guile-debug-show-bt-p t)
 '(geiser-guile-jump-on-debug-p t)
 '(geiser-implementations-alist (quote (((regexp "\\.scm$") guile))))
 '(geiser-mode-auto-p nil)
 '(geiser-mode-company-p nil)
 '(geiser-racket-binary "racket")
 '(geiser-racket-collects (quote ("/home/antoine/Downloads/racket-5.3.3/collects")))
 '(geiser-racket-extra-keywords
   (quote
    ("define-syntax-rule" "provide" "require" "unless" "when" "with-handlers" "define-values" "let-values")))
 '(geiser-repl-company-p nil)
 '(hl-paren-background-colors nil)
 '(hl-sexp-background-colors (quote ("grey15" "grey10" "gray5")))
 '(hl-sexp-colors nil)
 '(indent-tabs-mode nil)
 '(indicate-empty-lines t)
 '(inferior-lisp-program "sbcl")
 '(inhibit-local-menu-bar-menus nil)
 '(inhibit-startup-screen t)
 '(js2-auto-indent-p t)
 '(js2-mirror-mode t)
 '(linum-format " %7i ")
 '(nxhtml-default-encoding (quote utf-8))
 '(nxml-heading-element-name-regexp "Window\\|Property")
 '(nxml-section-element-name-regexp "div\\|Window")
 '(org-bullets-bullet-list (quote ("○" "○" "○" "○")))
 '(org-format-latex-options
   (quote
    (:foreground default :background default :scale 1.5 :html-foreground "Black" :html-background "Transparent" :html-scale 1.0 :matchers
                 ("begin" "$1" "$" "$$" "\\(" "\\["))))
 '(overflow-newline-into-fringe nil)
 '(quack-default-program "~/Downloads/racket-5.3.3/bin/racket")
 '(quack-pretty-lambda-p t)
 '(quack-programs
   (quote
    ("bigloo" "csi" "csi -hygienic" "gosh" "gracket" "gsi" "gsi ~~/syntax-case.scm -" "guile" "kawa" "mit-scheme" "~/Downloads/racket-5.3.3/bin/racket" "racket -il typed/racket" "rs" "scheme" "scheme48" "scsh" "sisc" "stklos" "sxi")))
 '(quack-smart-open-paren-p nil)
 '(racer-cmd "/home/antoine/.cargo/bin/racer")
 '(racer-rust-src-path "~/src/rustc-1.5.0/src")
 '(racket-mode-pretty-lambda t)
 '(racket-use-company-mode nil)
 '(safe-local-variable-values
   (quote
    ((bug-reference-bug-regexp . "<https?://\\(debbugs\\|bugs\\)\\.gnu\\.org/\\([0-9]+\\)>")
     (eval checkdoc-minor-mode 1))))
 '(sbt-program-name "sbt12 -sbt-snapshot")
 '(scala-mode-feature:tags-command "ctags-exuberant")
 '(scheme-program-name "gsi")
 '(semantic-java-dependency-system-include-path (quote ("/usr/share/java")))
 '(semantic-sb-button-format-tag-function (quote semantic-format-tag-uml-prototype))
 '(semantic-sb-info-format-tag-function (quote semantic-format-tag-short-doc))
 '(semanticdb-javap-classpath (quote ("/usr/share/java")))
 '(send-mail-function (quote smtpmail-send-it))
 '(smtpmail-smtp-server "smtp-mail.outlook.com")
 '(smtpmail-smtp-service 25)
 '(speedbar-default-position (quote right))
 '(speedbar-frame-parameters
   (quote
    ((minibuffer)
     (width . 20)
     (border-width . 0)
     (menu-bar-lines . 0)
     (tool-bar-lines . 0)
     (unsplittable . t)
     (left-fringe . 0)
     (background-color . "black"))))
 '(speedbar-hide-button-brackets-flag t)
 '(speedbar-show-unknown-files t)
 '(speedbar-sort-tags t)
 '(speedbar-supported-extension-expressions
   (quote
    (".org" ".wy" ".by" ".[ch]\\(\\+\\+\\|pp\\|c\\|h\\|xx\\)?" ".tex\\(i\\(nfo\\)?\\)?" ".el" ".emacs" ".l" ".lsp" ".p" ".java" ".f\\(90\\|77\\|or\\)?" ".ada" ".p[lm]" ".tcl" ".m" ".scm" ".pm" ".py" ".g" ".s?html" ".ma?k" "[Mm]akefile\\(\\.in\\)?" ".php" ".layout" ".yml" ".sql" ".css" ".js" ".scala" ".cljs?")))
 '(speedbar-tag-hierarchy-method nil)
 '(speedbar-use-images t)
 '(sql-postgres-login-params
   (quote
    ((user :default "antoine")
     (database :default "job_board")
     (server :default "localhost"))))
 '(sql-postgres-options (quote ("-P" "pager=off" "--port=5432")))
 '(yaml-indent-offset 4)
 '(yas/trigger-key "<end>"))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :background "black" :foreground "grey50" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 135 :width normal :foundry "adobe" :family "Source Code Pro"))))
 '(cursor ((t (:background "grey40"))))
 '(diff-added ((t (:inherit diff-changed :foreground "green3"))) t)
 '(diff-changed ((nil nil)) t)
 '(diff-file-header ((((class color) (min-colors 88) (background dark)) (:underline "yellow" :weight bold))) t)
 '(diff-header ((((class color) (min-colors 88) (background dark)) (:height 1.15))) t)
 '(diff-hunk-header ((t (:foreground "purple3"))) t)
 '(diff-index ((t nil)) t)
 '(diff-indicator-removed ((t (:inherit diff-removed))) t)
 '(diff-nonexistent ((t nil)) t)
 '(diff-refine-added ((t (:inherit diff-added-face :underline t))) t)
 '(diff-refine-change ((((class color) (min-colors 88) (background dark)) nil)) t)
 '(diff-refine-removed ((t (:inherit diff-removed-face :underline t))) t)
 '(diff-removed ((t (:inherit diff-changed :foreground "red3"))) t)
 '(flymake-errline ((((class color) (background dark)) (:underline "Firebrick4"))))
 '(flymake-warnline ((((class color) (background dark)) (:underline "yellow"))))
 '(font-lock-builtin-face ((t (:weight bold))))
 '(font-lock-comment-face ((t (:foreground "RosyBrown4"))))
 '(font-lock-function-name-face ((t (:foreground "dark cyan" :weight bold))))
 '(font-lock-keyword-face ((t (:foreground "cadet blue"))))
 '(font-lock-string-face ((t (:foreground "DarkOrange4"))))
 '(font-lock-variable-name-face ((t (:foreground "DarkSeaGreen4"))))
 '(helm-selection ((t (:underline "gold"))))
 '(highlight ((nil (:background "orange"))))
 '(hl-line ((t (:background "gray10"))))
 '(hl-paren-face ((t (:weight bold))) t)
 '(hl-sexp-face ((t (:background "dark orange"))) t)
 '(match ((t (:foreground "purple4"))))
 '(menu ((t (:overline nil))))
 '(mode-line ((t (:background "black" :foreground "grey40" :overline "dark olive green" :weight ultra-bold))))
 '(mode-line-inactive ((t (:inherit mode-line :foreground "grey20" :slant oblique :weight light))))
 '(racket-paren-face ((t (:foreground "grey50"))))
 '(rainbow-delimiters-depth-1-face ((((background light)) (:foreground "red"))) t)
 '(rainbow-delimiters-depth-9-face ((t (:foreground "dark red"))) t)
 '(rainbow-delimiters-unmatched-face ((((background light)) (:foreground "gold"))) t)
 '(semantic-tag-boundary-face ((((class color) (background dark)) (:overline "orange4"))) t)
 '(vertical-border ((nil (:background "black" :foreground "black"))))
 '(widget-field ((t (:background "sky blue")))))
(put 'narrow-to-page 'disabled nil)

